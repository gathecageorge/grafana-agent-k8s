---
# Setup permissions ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: monitoring-cluster-role
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]

- apiGroups: ["extensions"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
# Setup permissions ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitoring-service-account

---
# Setup permissions ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: monitoring-cluster-role-binding
roleRef:
  kind: ClusterRole
  name: monitoring-cluster-role
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: monitoring-service-account
    namespace: default

# grafana storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# grafana deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        promtail.io/logs: 'true'
        # prometheus.io/scrape: 'true'
        # prometheus.io/path: '/metrics'
        # prometheus.io/port: '3000'
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "1024Mi"
            cpu: "1000m"
        ports:
        - containerPort: 3000
        env:
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: "Admin"
        volumeMounts:
        - name: config-files
          mountPath: /etc/grafana/provisioning/dashboards/dashboard.yml
          subPath: 'grafana-dashboard.yml'
        
        - name: config-files
          mountPath: /etc/grafana/provisioning/dashboards/json/node-exporter.json
          subPath: 'grafana-dashboard-node-exporter.json'
        
        - name: config-files
          mountPath: /etc/grafana/provisioning/datasources/datasource.yml
          subPath: 'grafana-datasource.yml'

        - name: grafana-pvc
          mountPath: /var/lib/grafana
      volumes:
      - name: config-files
        configMap:
          name: config-files

      - name: grafana-pvc
        persistentVolumeClaim:
          claimName: grafana-pvc

---
# grafana service 3000 => 30000
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30000

---
# random logger deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: random-logger-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: random-logger
  template:
    metadata:
      labels:
        app: random-logger
      annotations:
        promtail.io/logs: 'true'
        # prometheus.io/scrape: 'true'
        # prometheus.io/path: '/metrics'
        # prometheus.io/port: '8080'
    spec:
      containers:
      - name: random-logger
        image: chentex/random-logger:latest
        args: ["10", "50"]
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "64Mi"
            cpu: "250m"

# minio storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# minio deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
      annotations:
        promtail.io/logs: 'true'
        # prometheus.io/scrape: 'true'
        # prometheus.io/path: '/metrics'
        # prometheus.io/port: '8080'
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 9000
        - containerPort: 9001
        command: ["sh", "-c", "mkdir -p /data/loki && mkdir -p /data/mimir && minio server --quiet /data --console-address \":9001\""]
        env:
        - name: MINIO_ROOT_USER
          value: myminio
        - name: MINIO_ROOT_PASSWORD
          value: mypassword
        volumeMounts:
        - name: minio-pvc
          mountPath: /data
      volumes:
      - name: minio-pvc
        persistentVolumeClaim:
          claimName: minio-pvc

---
# minio service 9000 and 9001 => 30000 and 30001
apiVersion: v1
kind: Service
metadata:
  name: minio-service
spec:
  type: NodePort
  selector:
    app: minio
  ports:
  - port: 9000
    targetPort: 9000
    name: "9000"
    nodePort: 30001

  - port: 9001
    targetPort: 9001
    name: "9001"
    nodePort: 30002

---
# mimir deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mimir-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mimir
  template:
    metadata:
      labels:
        app: mimir
      annotations:
        promtail.io/logs: 'true'
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '8080'
    spec:
      serviceAccountName: monitoring-service-account
      containers:
      - name: mimir
        image: grafana/mimir:latest
        # hostame: mimir-1
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "1024Mi"
            cpu: "1000m"
        args: ["-config.file=/etc/mimir.yml"]
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config-files
          mountPath: /etc/mimir.yml
          subPath: 'mimir.yml'
        
        - name: config-files
          mountPath: /etc/alertmanager-fallback-config.yaml
          subPath: 'mimir-alertmanager.yml'
      volumes:
      - name: config-files
        configMap:
          name: config-files

---
# mimir service 8080 => 30003
apiVersion: v1
kind: Service
metadata:
  name: mimir-service
spec:
  type: NodePort
  selector:
    app: mimir
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30003

---
# loki deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
      annotations:
        promtail.io/logs: 'true'
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '3100'
    spec:
      containers:
      - name: loki
        image: grafana/loki:latest
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        args: ["--config.file=/etc/loki/config.yml"]
        ports:
        - containerPort: 3100
        volumeMounts:
        - name: config-files
          mountPath: /etc/loki/config.yml
          subPath: 'loki.yml'
      volumes:
      - name: config-files
        configMap:
          name: config-files

---
# loki service 3100 => 30004
apiVersion: v1
kind: Service
metadata:
  name: loki-service
spec:
  type: NodePort
  selector:
    app: loki
  ports:
  - port: 3100
    targetPort: 3100
    nodePort: 30004

---
# grafana-agent DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: grafana-agent-deployment
spec:
  selector:
    matchLabels:
      app: grafana-agent
  template:
    metadata:
      labels:
        app: grafana-agent
      annotations:
        promtail.io/logs: 'true'
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '8080'
    spec:
      serviceAccountName: monitoring-service-account
      containers:
      - name: grafana-agent
        image: grafana/agent:latest
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "1024Mi"
            cpu: "1000m"
        command: ["/bin/bash", "-c", "/configs/grafana-agent-entrypoint.sh george-kube-logs"]
        env:
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
        volumeMounts:
        - name: entrypoint-config
          mountPath: /configs/grafana-agent-entrypoint.sh
          subPath: 'grafana-agent-entrypoint.sh'
        
        - name: config-files
          mountPath: /configs/grafana-agent-prometheus-custom.yml
          subPath: 'grafana-agent-prometheus-custom.yml'
        
        - name: config-files
          mountPath: /configs/grafana-agent-prometheus.yml
          subPath: 'grafana-agent-prometheus.yml'
        
        - name: config-files
          mountPath: /configs/grafana-agent-promtail.yml
          subPath: 'grafana-agent-promtail.yml'
        
        - name: containers
          mountPath: /var/lib/docker/containers
          readOnly: true
        
        - name: pods
          mountPath: /var/log/pods
          readOnly: true
      volumes:
      - name: entrypoint-config
        configMap:
          name: config-files
          defaultMode: 0744

      - name: config-files
        configMap:
          name: config-files

      - name: containers
        hostPath:
          path: /var/lib/docker/containers
      
      - name: pods
        hostPath:
          path: /var/log/pods

# ---
# # test-promtail DaemonSet
# apiVersion: apps/v1
# kind: DaemonSet
# metadata:
#   name: test-promtail-deployment
# spec:
#   selector:
#     matchLabels:
#       app: test-promtail
#   template:
#     metadata:
#       labels:
#         app: test-promtail
#       annotations:
#         promtail.io/logs: 'true'
#         prometheus.io/scrape: 'true'
#         prometheus.io/path: '/metrics'
#         prometheus.io/port: '80'
#     spec:
#       serviceAccountName: monitoring-service-account
#       containers:
#       - name: test-promtail
#         image: grafana/promtail:latest
#         resources:
#           requests:
#             memory: "64Mi"
#             cpu: "250m"
#           limits:
#             memory: "512Mi"
#             cpu: "500m"
#         args: ["--config.file=/etc/promtail/promtail.yml"]
#         env:
#           - name: HOSTNAME
#             valueFrom:
#               fieldRef:
#                 apiVersion: v1
#                 fieldPath: spec.nodeName
#         volumeMounts:
#         - name: config-files
#           mountPath: /etc/promtail/promtail.yml
#           subPath: 'test-promtail.yml'
        
#         - name: containers
#           mountPath: /var/lib/docker/containers
#           readOnly: true
        
#         - name: pods
#           mountPath: /var/log/pods
#           readOnly: true
#       volumes:
#       - name: config-files
#         configMap:
#           name: config-files
      
#       - name: containers
#         hostPath:
#           path: /var/lib/docker/containers
      
#       - name: pods
#         hostPath:
#           path: /var/log/pods
